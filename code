# PLASMA DATA ----
# 6.26.23
# Sarah Binder


# Install packages
install.packages("readr")
install.packages("tidyverse")

# Load packages
library(readxl)
library(tidyverse)
library(dplyr)
library(magrittr)

#. ----
# AANDS DATA ----
# data with scan type, selected draw based on proximity to scan

aands <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/aands_raw.xlsx")
head(aands)

# mutate data types

# convert date data types
aands <- aands %>% 
  mutate(selected_draw = as.Date(selected_draw), scan_date_amy = as.Date(scan_date_amy), scan_date_tau = as.Date(scan_date_tau))

head(aands)
View(aands)

# filter aands df to show only pts where the selected_draw = draw_1 
select_draw_1 <- aands %>% 
  filter(draw_number == 1)
nrow(select_draw_1) # 91
head(select_draw_1)


# filter aands df to show only pts where the selected_draw = draw_2
select_draw_2 <- aands %>% 
  filter(draw_number == 2)
nrow(select_draw_2) # 91
head(select_draw_2)

#. ----

# ASSAYS ----

# PTAU181 ----

ptau181 <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/ptau181_raw.xlsx")
head(ptau181)

# manipulate string data

# replace BCID with sub_num
ptau181$Sample_ID <- sub("BC0(0)?", "", ptau181$Sample_ID)
ptau181$Sample_ID <- paste0("sub-", ptau181$Sample_ID)
colnames(ptau181)[1] <- "sub_num"

# simplify UDS ID
ptau181$Alternate_ID <- sub("UDS-", "", ptau181$Alternate_ID)
colnames(ptau181)[2] <- "uds_id"

# mutate data types

# convert date data types
ptau181 <- ptau181 %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2), 
         draw_date_3 = as.Date(draw_date_3), draw_date_4 = as.Date(draw_date_4), 
         draw_date_5 = as.Date(draw_date_5))

# convert numeric data types
ptau181 <- ptau181 %>% 
  mutate(ptau181_conc_1 = as.numeric(ptau181_conc_1), ptau181_conc_2 = as.numeric(ptau181_conc_2), ptau181_conc_3 = as.numeric(ptau181_conc_3),
         ptau181_conc_4 = as.numeric(ptau181_conc_4), ptau181_conc_5 = as.numeric(ptau181_conc_5), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2), 
         CV_3 = as.numeric(CV_3), CV_4 = as.numeric(CV_4), CV_5 = as.numeric(CV_5))

View(ptau181)

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- ptau181[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "ptau181_conc"
colnames(filtered_1)[4] <- "ptau181_CV"
print(filtered_1)
nrow(filtered_1) #91

filtered_2 <- ptau181[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "ptau181_conc"
colnames(filtered_2)[4] <- "ptau181_CV"
print(filtered_2)
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite as ptau

ptau181 <- rbind(filtered_1, filtered_2) %>% 
  arrange(sub_num)
# revisit: arrange not fully working.. sorting as sub-11 then sub-110 etc. ----
head(ptau181)
View(ptau181)
nrow(ptau181) # 99


# GFAP  ----

# Load data
gfap <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/gfap_raw.xlsx")

head(gfap)
View(gfap)

# remove cols not needed: alt. Id, draws 3- 5 as selected draw is either 1 or 2
gfap <- gfap[ , c(1, 3:8)]

# manipulate string data
# replace BCID with sub_num
gfap$Sample_ID <- sub("BC0(0)?", "", gfap$Sample_ID)
gfap$Sample_ID <- paste0("sub-", gfap$Sample_ID)
colnames(gfap)[1] <- "sub_num"

# mutate data types
gfap <- gfap %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2), GFAP_Conc_1 = as.numeric(GFAP_Conc_1), 
         GFAP_Conc_2 = as.numeric(GFAP_Conc_2), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2))
head(gfap)
# check data types
class(gfap$draw_date_1) # Date
class(gfap$CV_1) # numeric
class(gfap$GFAP_Conc_1) # numeric
nrow(gfap) #96

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- gfap[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "gfap_conc"
colnames(filtered_1)[4] <- "gfap_CV"
nrow(filtered_1) #88

filtered_2 <- gfap[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "gfap_conc"
colnames(filtered_2)[4] <- "gfap_CV"
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite as gfap
gfap <- rbind(filtered_1, filtered_2)
View(gfap)
nrow(gfap) # 96


# NFL ----

nfl <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/nfl_raw.xlsx")
head(nfl)


# remove cols not needed: alt. Id, draws 3- 5 as selected draw is either 1 or 2
nfl <- nfl[ , c(1, 3:8)]

# manipulate string data
# replace BCID with sub_num
nfl$Sample_ID <- sub("BC0(0)?", "", nfl$Sample_ID)
nfl$Sample_ID <- paste0("sub-", nfl$Sample_ID)
colnames(nfl)[1] <- "sub_num"

head(nfl)
View(nfl)

# mutate data types
nfl <- nfl %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2), nfl_conc_1 = as.numeric(nfl_conc_1), 
         nfl_conc_2 = as.numeric(nfl_conc_2), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2))
head(nfl)

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- nfl[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "nfl_conc"
colnames(filtered_1)[4] <- "nfl_CV"
nrow(filtered_1) #88

filtered_2 <- nfl[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "nfl_conc"
colnames(filtered_2)[4] <- "nfl_CV"
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite
nfl <- rbind(filtered_1, filtered_2)
View(nfl)
nrow(nfl) # 96

# TAU  ----

tau <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/tau_raw.xlsx")
head(tau)

# remove cols not needed: alt. Id, draws 3- 5 as selected draw is either 1 or 2
tau <- tau[ , c(1, 3:8)]

# manipulate string data
# replace BCID with sub_num
tau$Sample_ID <- sub("BC0(0)?", "", tau$Sample_ID)
tau$Sample_ID <- paste0("sub-", tau$Sample_ID)
colnames(tau)[1] <- "sub_num"

head(tau)
View(tau)

# mutate data types
tau <- tau %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2),tau_conc_1 = as.numeric(tau_conc_1), 
         tau_conc_2 = as.numeric(tau_conc_2), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2))

head(tau)
View(tau)

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- tau[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "tau_conc"
colnames(filtered_1)[4] <- "tau_CV"
nrow(filtered_1) #84

filtered_2 <- tau[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "tau_conc"
colnames(filtered_2)[4] <- "tau_CV"
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite
tau <- rbind(filtered_1, filtered_2)
View(tau)
nrow(tau) # 92


# AB40  ----

ab40 <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/ab40_raw.xlsx")
head(ab40)

# remove cols not needed: alt. Id, draws 3- 5 as selected draw is either 1 or 2
ab40 <- ab40[ , c(1, 3:8)]

# manipulate string data
# replace BCID with sub_num
ab40$Sample_ID <- sub("BC0(0)?", "", ab40$Sample_ID)
ab40$Sample_ID <- paste0("sub-", ab40$Sample_ID)
colnames(ab40)[1] <- "sub_num"

# mutate data types
ab40 <- ab40 %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2), ab40_conc_1 = as.numeric(ab40_conc_1), 
         ab40_conc_2 = as.numeric(ab40_conc_2), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2))
head(ab40)
View(ab40)

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- ab40[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "ab40_conc"
colnames(filtered_1)[4] <- "ab40_CV"
nrow(filtered_1) #84

filtered_2 <- ab40[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "ab40_conc"
colnames(filtered_2)[4] <- "ab40_CV"
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite
ab40 <- rbind(filtered_1, filtered_2)
View(ab40)
nrow(ab40) # 92



# AB42  ----

ab42 <- read_excel("/Volumes/shr1/HLAND_Output_Data/Plasma_data/working_sheets/ab42_raw.xlsx")
head(ab42)

# remove cols not needed: alt. Id, draws 3- 5 as selected draw is either 1 or 2
ab42 <- ab42[ , c(1, 3:8)]

# manipulate string data
# replace BCID with sub_num
ab42$Sample_ID <- sub("BC0(0)?", "", ab42$Sample_ID)
ab42$Sample_ID <- paste0("sub-", ab42$Sample_ID)
colnames(ab42)[1] <- "sub_num"

# mutate data types
ab42 <- ab42 %>% 
  mutate(draw_date_1 = as.Date(draw_date_1), draw_date_2 = as.Date(draw_date_2), ab42_conc_1 = as.numeric(ab42_conc_1),
               ab42_conc_2 = as.numeric(ab42_conc_2), CV_1 = as.numeric(CV_1), CV_2 = as.numeric(CV_2))

# create 2 dfs: filtered_1 where the selected_draw is draw_1, filtered_2 where the select_draw is draw_2
# rename cols to standardize
filtered_1 <- ab42[ , 1:4] %>% 
  filter(sub_num %in% select_draw_1$sub_num) 
colnames(filtered_1)[2] <- "draw_date"
colnames(filtered_1)[3] <- "ab42_conc"
colnames(filtered_1)[4] <- "ab42_CV"
nrow(filtered_1) #84

filtered_2 <- ab42[ , c(1, 5:7)] %>% 
  filter(sub_num %in% select_draw_2$sub_num)
colnames(filtered_2)[2] <- "draw_date"
colnames(filtered_2)[3] <- "ab42_conc"
colnames(filtered_2)[4] <- "ab42_CV"
nrow(filtered_2) #8

# rbind filtered_1 and filtered_2 and overwrite as gfap
ab42 <- rbind(filtered_1, filtered_2)
View(ab42)
nrow(ab42) # 92

# .-----

head(ptau181)
head(gfap)
head(nfl)
head(tau)
head(ab40)
head(ab42)

# revisit ----
#not all subs have all assays 
nrow(ptau181) # 99
nrow(gfap) # 96
nrow(nfl) # 96
nrow(tau) # 92
nrow(ab40) # 92
nrow(ab42) # 92

# Join assays ----
# LEFT JOIN w ptau as the left df to retain all 99 subs
df <- left_join(ptau181, gfap, by = c("sub_num", "draw_date"))
View(df)
nrow(df) # 99

df2 <- left_join(df, nfl, by = c("sub_num", "draw_date"))
head(df2)
nrow(df2) # 99

df3 <- left_join(df2, tau, by = c("sub_num", "draw_date"))
head(df3)
nrow(df3) # 99

df4 <- left_join(df3, ab40, by = c("sub_num", "draw_date"))
head(df4)
nrow(df4) # 99

all_assays <- left_join(df4, ab42, by = c("sub_num", "draw_date"))
head(all_assays)
nrow(all_assays) # 99
View(all_assays)

# Join with aands data ----

plasma_all <- left_join(aands, all_assays, by = c("sub_num", "selected_draw" = "draw_date"))
View(plasma_all)
nrow(plasma_all) # 99

# . ----
# Next steps: ----

# 1. add column to note cases where all assays are NOT available for the selected draw
# 2. calculate interval between amy scan and tau scan 
# 3. add column noting whether selected draw date is closest to amy or tau scan
# 4. examine CVs: any CV > 20 mark.. new column noting CV >20
# 5. Determine the range, median, mean, and SD of time between draw and amy and tau scan
# 6. check for any data entry errors in raw datasets (ie. 2 pts the draw date is incorrect?), and check the "revisits" in this R file

# send to Carolina!

#. ----
# commented out code ----
# melt----
#install.packages("reshape2")
#library(reshape2)

# attempt with small df: 
#filter_P <- ptau181[ , c(1, 2, 3, 6, 9, 12, 15)]
#filter_P

#melted_P <- melt(filter_P, id.vars = c("sub_num", "uds_id"), measure.vars = c("draw_date_1", "draw_date_2", "draw_date_3", "draw_date_4", "draw_date_5"), 
    # variable.name = "Draw_Number", value.name = "Date")

# difficulty with larger dataframe:
# head(ptau181)
#melt_test_1 <- melt(ptau181[, c(1, 2, 3, 6)], id.vars = c("sub_num", "uds_id"), measure.vars = c("draw_date_1", "draw_date_2"), 
                 #variable.name = "Draw_Number", value.name = "Date")

#melt_test_2 <- melt(ptau181[, c(1, 2, 4, 7)], id.vars = c("sub_num", "uds_id"), measure.vars = c("ptau181_conc_1", "ptau181_conc_2"), 
                            #variable.name = "Conc_Number", value.name = "Ptau181_Conc")

#melt_test_3 <- melt(ptau181[, c(1, 2, 5, 8)], id.vars = c("sub_num", "uds_id"), measure.vars = c("CV_1", "CV_2"), 
                            #variable.name = "CV_Number", value.name = "Ptau181_CV")

#merged_df <- merge(melt_test_1, melt_test_2, by = c("sub_num", "uds_id"))
#merged_df <- merge(merged_df, melt_test_3, by = c("sub_num", "uds_id"))
#View(merged_df)
#nrow(merged_df) # 792 */




